type Query {
  info: String!
  userProfile: User!
  users(where: UserWhereInput): [User]!
  projects(where: ProjectWhereInput): [Project]!
  organizations(where: OrganizationWhereInput): [Organization]!
  mentors(where: MentorWhereInput): [Mentor]!
  userProposals(where: ProposalWhereInput): [Proposal]!
  proposals(where: ProposalWhereInput): [Proposal]!
  events: [Event]!
  projectsConnection(where: ProjectWhereUniqueInput): ProjectConnection!
  selectedProposals(where: ProposalWhereInput): [Proposal]
}

type Mutation {
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(
    data: ProjectUpdateInput!
    where: ProjectWhereUniqueInput!
  ): Project
  deleteProject(where: ProjectWhereUniqueInput!): Project
  createProposal(data: ProposalCreateInput!): Proposal!
  updateProposal(
    data: ProposalUpdateInput!
    where: ProposalWhereUniqueInput!
  ): Proposal
  deleteProposal(where: ProposalWhereUniqueInput!): Proposal
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateOrganization(
    data: OrganizationUpdateInput!
    where: OrganizationWhereUniqueInput!
  ): Organization!
  deleteOrganization(where: OrganizationWhereUniqueInput): Organization!
  updateMentor(data: MentorUpdateInput!, where: MentorWhereUniqueInput!): Mentor
  createMentor(data: MentorCreateInput!): Mentor!
  deleteMentor(where: MentorWhereUniqueInput!): Mentor
  uploadFile(data: Upload!): File!
}

scalar Upload
scalar DateTime

input FileInput {
  file: Upload!
  org: ID!
  num: Int!
}

type File {
  id: ID!
  fileName: String!
  filePath: String!
}

input UserWhereUniqueInput {
  id: ID
  email: String
  mobileNumber: String
  githubHandle: String
}

input ProjectWhereUniqueInput {
  id: ID
  projSlug: String
  organization: OrganizationWhereUniqueInput
}

input OrganizationWhereUniqueInput {
  id: ID
  orgSlug: String
  githubUrl: String
}

input MentorWhereUniqueInput {
  id: ID
}

input ProposalWhereUniqueInput {
  id: ID
}

input UserUpdateInput {
  firstName: String
  lastName: String
  role: roles
  email: String
  mobileNumber: String
  githubHandle: String
  password: String
  isVerified: Boolean
  session: String
  profileImage: String
}

input ProjectCreateInput {
  id: ID
  organization: OrganizationCreateOneInput!
  projName: String!
  projSlug: String!
  projDesc: String
  githubUrl: String
  projMinDesc: String
  difficulty: difficulties
}

input OrganizationCreateOneInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

input ProjectUpdateInput {
  organization: OrganizationUpdateOneRequiredInput
  projName: String
  projSlug: String
  projDesc: String
  githubUrl: String
  projMinDesc: String
  difficulty: difficulties
}

input ProposalCreateInput {
  id: ID
  user: UserCreateOneInput!
  organization: OrganizationCreateOneInput!
  isAccepted: Boolean
  propUrl: String!
  propDesc: String!
  mentor: MentorWhereInput!
}

input FileCreateOneInput {
  create: FileCreateInput
}

input FileCreateInput {
  fileName: String!
  filePath: String!
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input ProposalUpdateInput {
  user: UserUpdateOneRequiredInput
  organization: OrganizationUpdateOneRequiredInput
  file: FileUpdateOneRequiredInput
  isAccepted: Boolean
  propUrl: String
  propDesc: String
  mentor: MentorWhereInput
}

input FileUpdateOneRequiredInput {
  create: FileCreateInput
  update: FileUpdateDataInput
  upsert: FileUpsertNestedInput
}

input FileUpdateDataInput {
  fileName: String
  filePath: String
}

input FileUpsertNestedInput {
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input OrganizationCreateInput {
  id: ID
  orgName: String!
  orgSlug: String!
  orgDesc: String
  orgMaxDesc: String
  githubUrl: String
  stack: OrganizationCreatestackInput
  contactUrl: String
  communicationChannel: String
}

input OrganizationCreatestackInput {
  set: [String!]
}

input OrganizationUpdateInput {
  orgName: String
  orgSlug: String
  orgDesc: String
  orgMaxDesc: String
  githubUrl: String
  stack: OrganizationUpdatestackInput
  contactUrl: String
  communicationChannel: String
}

input OrganizationUpdatestackInput {
  set: [String!]
}

input MentorUpdateInput {
  user: UserUpdateOneRequiredInput
  organization: OrganizationUpdateOneRequiredInput
}

input OrganizationUpdateOneRequiredInput {
  create: OrganizationCreateInput
  update: OrganizationUpdateDataInput
  upsert: OrganizationUpsertNestedInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpsertNestedInput {
  update: OrganizationUpdateDataInput!
  create: OrganizationCreateInput!
}

input UserUpdateOneRequiredInput {
  connect: UserWhereUniqueInput
  update: UserUpdateInput
}

input ProjectUpdateOneRequiredInput {
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateInput
}

input MentorCreateInput {
  id: ID
  user: UserCreateOneInput!
  organization: OrganizationCreateOneInput!
}

enum roles {
  Dev
  Mentor
  Admin
}

enum difficulties {
  Easy
  Medium
  Hard
}

type Project {
  id: ID!
  organization: Organization!
  projName: String!
  projSlug: String!
  projDesc: String
  githubUrl: String
  projMinDesc: String
  difficulty: difficulties
}

type Organization {
  id: ID!
  orgName: String!
  orgSlug: String!
  orgDesc: String
  orgMaxDesc: String
  githubUrl: String
  stack: [String!]!
  contactUrl: String
  communicationChannel: String
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  role: roles
  email: String
  mobileNumber: String
  githubHandle: String!
  password: String
  isVerified: Boolean
  session: String
  profileImage: String
}

type Mentor {
  id: ID!
  user: User!
  organization: Organization!
}

type Proposal {
  id: ID!
  user: User!
  organization: Organization!
  file: File!
  isAccepted: Boolean!
  propUrl: String!
  propDesc: String!
  mentor: Mentor
}

type Event {
  id: ID!
  date: DateTime!
  eventDesc: String!
}

input UserWhereInput {
  id: ID
  firstName: String
  lastName: String
  role: roles
  email: String
  mobileNumber: String
  githubHandle: String
  password: String
  isVerified: Boolean
  session: String
  profileImage: String
}

input ProjectWhereInput {
  id: ID
  organization: OrganizationWhereInput
  contactUrl: String
  projName: String
  projSlug: String
  projDesc: String
  githubUrl: String
  difficulty: difficulties
}

input ProposalWhereInput {
  id: ID
  user: UserWhereInput
  organization: OrganizationWhereInput
  isAccepted: Boolean
  propUrl: String
  file: FileWhereInput
}

input FileWhereInput {
  fileName: String
  filePath: String
}

input MentorWhereInput {
  id: ID
  user: UserWhereInput
  organization: OrganizationWhereInput
}

input OrganizationWhereInput {
  id: ID
  orgName: String
  orgSlug: String
  orgDesc: String
  orgMaxDesc: String
  githubUrl: String
  communicationChannel: String
}

input OrganizationUpdateDataInput {
  orgName: String
  orgSlug: String
  orgDesc: String
  orgMaxDesc: String
  githubUrl: String
}

type AggregateProject {
  count: Int!
}

type ProjectConnection {
  aggregate: AggregateProject!
}